#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <limits>
#include <cctype>
#include <algorithm>

using namespace std;

// Utility functions
void clearScreen() {
    system("cls||clear");
}

void pressEnterToContinue() {
    cout << "\nPress Enter to continue...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cin.get();
}

int getCurrentYear() {
    time_t now = time(0);
    tm* ltm = localtime(&now);
    return 1900 + ltm->tm_year;
}

// ======================= CLASS DEFINITIONS =======================
class Person {
protected:
    string name;
    string address;
    string phone;

public:
    Person(const string& n, const string& addr, const string& ph)
        : name(n), address(addr), phone(ph) {
    }

    virtual ~Person() {}

    virtual void display() const {
        cout << "Name: " << name << "\nAddress: " << address << "\nPhone: " << phone << endl;
    }

    string get_name() const { return name; }
    string get_address() const { return address; }
    string get_phone() const { return phone; }
};

class Book {
protected:
    int book_id;
    string author;
    string title;
    float price;
    bool available;
    int edition;
    int year_published;

public:
    Book(int id, const string& auth, const string& t, float p, int ed, int year)
        : book_id(id), author(auth), title(t), price(p), available(true), edition(ed), year_published(year) {
    }

    virtual ~Book() {}

    virtual void display() const {
        cout << "ID: " << book_id << "\nTitle: " << title
            << "\nAuthor: " << author << "\nPrice: $" << price
            << "\nEdition: " << edition << "\nYear: " << year_published
            << "\nStatus: " << (available ? "Available" : "Checked Out") << endl;
    }

    bool is_available() const { return available; }
    void check_out() { available = false; }
    void check_in() { available = true; }
    int get_id() const { return book_id; }
    string get_title() const { return title; }
    string get_author() const { return author; }
};

class Member : public Person {
protected:
    int member_id;
    string join_date;
    int books_borrowed;
    int max_books;
    vector<int> borrowed_book_ids;

public:
    Member(int id, const string& n, const string& addr, const string& ph,
        const string& date, int max)
        : Person(n, addr, ph), member_id(id), join_date(date),
        books_borrowed(0), max_books(max) {
    }

    virtual ~Member() {}

    void display() const override {
        Person::display();
        cout << "Member ID: " << member_id << "\nJoin Date: " << join_date
            << "\nBooks Borrowed: " << books_borrowed << "/" << max_books << endl;
    }

    bool can_borrow() const { return books_borrowed < max_books; }
    void borrow_book(int book_id) {
        borrowed_book_ids.push_back(book_id);
        books_borrowed++;
    }
    bool return_book(int book_id) {
        auto it = find(borrowed_book_ids.begin(), borrowed_book_ids.end(), book_id);
        if (it != borrowed_book_ids.end()) {
            borrowed_book_ids.erase(it);
            books_borrowed--;
            return true;
        }
        return false;
    }
    int get_member_id() const { return member_id; }
    const vector<int>& get_borrowed_books() const { return borrowed_book_ids; }
};

class Student : public Member {
    string course;
    int semester;

public:
    Student(int id, const string& n, const string& addr, const string& ph,
        const string& date, const string& crs, int sem)
        : Member(id, n, addr, ph, date, 5), course(crs), semester(sem) {
    }

    void display() const override {
        cout << "=== STUDENT RECORD ===" << endl;
        Member::display();
        cout << "Course: " << course << "\nSemester: " << semester << endl;
    }
};

class Faculty : public Member {
    string department;
    string position;

public:
    Faculty(int id, const string& n, const string& addr, const string& ph,
        const string& date, const string& dept, const string& pos)
        : Member(id, n, addr, ph, date, 10), department(dept), position(pos) {
    }

    void display() const override {
        cout << "=== FACULTY RECORD ===" << endl;
        Member::display();
        cout << "Department: " << department << "\nPosition: " << position << endl;
    }
};

class Librarian : public Person {
    string staff_id;
    string hire_date;
    string password;

public:
    Librarian(const string& id, const string& n, const string& addr,
        const string& ph, const string& date, const string& pwd)
        : Person(n, addr, ph), staff_id(id), hire_date(date), password(pwd) {
    }

    bool authenticate(const string& pwd) const {
        return password == pwd;
    }

    void display() const override {
        cout << "=== LIBRARIAN RECORD ===" << endl;
        Person::display();
        cout << "Staff ID: " << staff_id << "\nHire Date: " << hire_date << endl;
    }
};

class LibrarySystem {
private:
    vector<Book*> books;
    vector<Member*> members;
    Librarian* librarian;
    bool logged_in;

    // Helper functions
    Book* find_book(int id) {
        for (auto book : books) {
            if (book->get_id() == id) return book;
        }
        return nullptr;
    }

    Member* find_member(int id) {
        for (auto member : members) {
            if (member->get_member_id() == id) return member;
        }
        return nullptr;
    }

    void display_books() const {
        clearScreen();
        cout << "=== BOOK CATALOG ===" << endl;
        for (const auto& book : books) {
            book->display();
            cout << "--------------------" << endl;
        }
    }

    void display_members() const {
        clearScreen();
        cout << "=== LIBRARY MEMBERS ===" << endl;
        for (const auto& member : members) {
            member->display();
            cout << "--------------------" << endl;
        }
    }

    void librarian_menu() {
        int choice;
        do {
            clearScreen();
            cout << "=== LIBRARIAN MENU ===" << endl;
            cout << "1. Add Book\n2. Remove Book\n3. Add Member\n4. Remove Member\n"
                << "5. Check Out Book\n6. Check In Book\n7. View All Books\n"
                << "8. View All Members\n9. Search Book\n10. Search Member\n"
                << "11. Change Password\n0. Logout\n\nEnter choice: ";
            cin >> choice;

            switch (choice) {
            case 1: add_book(); break;
            case 2: remove_book(); break;
            case 3: add_member(); break;
            case 4: remove_member(); break;
            case 5: check_out_book(); break;
            case 6: check_in_book(); break;
            case 7: display_books(); pressEnterToContinue(); break;
            case 8: display_members(); pressEnterToContinue(); break;
            case 9: search_book(); break;
            case 10: search_member(); break;
            case 11: change_password(); break;
            case 0: logged_in = false; break;
            default: cout << "Invalid choice!" << endl; pressEnterToContinue();
            }
        } while (logged_in);
    }

    void add_book() {
        clearScreen();
        cout << "=== ADD NEW BOOK ===" << endl;

        int id, edition, year;
        string title, author;
        float price;

        cout << "Enter Book ID: ";
        cin >> id;
        cin.ignore();
        cout << "Enter Title: ";
        getline(cin, title);
        cout << "Enter Author: ";
        getline(cin, author);
        cout << "Enter Price: ";
        cin >> price;
        cout << "Enter Edition: ";
        cin >> edition;
        cout << "Enter Year Published: ";
        cin >> year;

        books.push_back(new Book(id, author, title, price, edition, year));
        cout << "\nBook added successfully!" << endl;
        pressEnterToContinue();
    }

    void remove_book() {
        clearScreen();
        cout << "=== REMOVE BOOK ===" << endl;
        int id;
        cout << "Enter Book ID to remove: ";
        cin >> id;

        for (auto it = books.begin(); it != books.end(); ++it) {
            if ((*it)->get_id() == id) {
                delete* it;
                books.erase(it);
                cout << "Book removed successfully!" << endl;
                pressEnterToContinue();
                return;
            }
        }
        cout << "Book not found!" << endl;
        pressEnterToContinue();
    }

    void add_member() {
        clearScreen();
        cout << "=== ADD NEW MEMBER ===" << endl;

        int type, id, semester;
        string name, address, phone, date, course, department, position;

        cout << "Member Type (1. Student, 2. Faculty): ";
        cin >> type;
        cout << "Enter Member ID: ";
        cin >> id;
        cin.ignore();
        cout << "Enter Name: ";
        getline(cin, name);
        cout << "Enter Address: ";
        getline(cin, address);
        cout << "Enter Phone: ";
        getline(cin, phone);
        cout << "Enter Join Date (YYYY-MM-DD): ";
        getline(cin, date);

        if (type == 1) {
            cout << "Enter Course: ";
            getline(cin, course);
            cout << "Enter Semester: ";
            cin >> semester;
            members.push_back(new Student(id, name, address, phone, date, course, semester));
        }
        else {
            cout << "Enter Department: ";
            getline(cin, department);
            cout << "Enter Position: ";
            getline(cin, position);
            members.push_back(new Faculty(id, name, address, phone, date, department, position));
        }

        cout << "\nMember added successfully!" << endl;
        pressEnterToContinue();
    }

    void remove_member() {
        clearScreen();
        cout << "=== REMOVE MEMBER ===" << endl;
        int id;
        cout << "Enter Member ID to remove: ";
        cin >> id;

        for (auto it = members.begin(); it != members.end(); ++it) {
            if ((*it)->get_member_id() == id) {
                // Check if member has any books checked out
                if (!(*it)->get_borrowed_books().empty()) {
                    cout << "Cannot remove member with checked out books!" << endl;
                    pressEnterToContinue();
                    return;
                }

                delete* it;
                members.erase(it);
                cout << "Member removed successfully!" << endl;
                pressEnterToContinue();
                return;
            }
        }
        cout << "Member not found!" << endl;
        pressEnterToContinue();
    }

    void check_out_book() {
        clearScreen();
        cout << "=== CHECK OUT BOOK ===" << endl;
        int book_id, member_id;

        cout << "Enter Member ID: ";
        cin >> member_id;
        Member* member = find_member(member_id);
        if (!member) {
            cout << "Member not found!" << endl;
            pressEnterToContinue();
            return;
        }

        if (!member->can_borrow()) {
            cout << "Member has reached maximum borrowing limit!" << endl;
            pressEnterToContinue();
            return;
        }

        cout << "Enter Book ID: ";
        cin >> book_id;
        Book* book = find_book(book_id);
        if (!book) {
            cout << "Book not found!" << endl;
            pressEnterToContinue();
            return;
        }

        if (!book->is_available()) {
            cout << "Book is already checked out!" << endl;
            pressEnterToContinue();
            return;
        }

        book->check_out();
        member->borrow_book(book_id);
        cout << "Book checked out successfully!" << endl;
        pressEnterToContinue();
    }

    void check_in_book() {
        clearScreen();
        cout << "=== CHECK IN BOOK ===" << endl;
        int book_id, member_id;

        cout << "Enter Member ID: ";
        cin >> member_id;
        Member* member = find_member(member_id);
        if (!member) {
            cout << "Member not found!" << endl;
            pressEnterToContinue();
            return;
        }

        cout << "Enter Book ID: ";
        cin >> book_id;
        Book* book = find_book(book_id);
        if (!book) {
            cout << "Book not found!" << endl;
            pressEnterToContinue();
            return;
        }

        if (book->is_available()) {
            cout << "Book is not checked out!" << endl;
            pressEnterToContinue();
            return;
        }

        if (!member->return_book(book_id)) {
            cout << "This member didn't borrow this book!" << endl;
            pressEnterToContinue();
            return;
        }

        book->check_in();
        cout << "Book checked in successfully!" << endl;
        pressEnterToContinue();
    }

    void search_book() {
        clearScreen();
        cout << "=== SEARCH BOOK ===" << endl;
        cout << "Search by:\n1. Title\n2. Author\n3. ID\nEnter choice: ";
        int choice;
        cin >> choice;
        cin.ignore();

        string search_term;
        cout << "Enter search term: ";
        getline(cin, search_term);

        bool found = false;
        for (const auto& book : books) {
            bool match = false;
            switch (choice) {
            case 1: match = book->get_title().find(search_term) != string::npos; break;
            case 2: match = book->get_author().find(search_term) != string::npos; break;
            case 3: match = to_string(book->get_id()) == search_term; break;
            }

            if (match) {
                book->display();
                cout << "--------------------" << endl;
                found = true;
            }
        }

        if (!found) {
            cout << "No books found matching your search." << endl;
        }
        pressEnterToContinue();
    }

    void search_member() {
        clearScreen();
        cout << "=== SEARCH MEMBER ===" << endl;
        cout << "Search by:\n1. Name\n2. ID\nEnter choice: ";
        int choice;
        cin >> choice;
        cin.ignore();

        string search_term;
        cout << "Enter search term: ";
        getline(cin, search_term);

        bool found = false;
        for (const auto& member : members) {
            bool match = false;
            switch (choice) {
            case 1: match = member->get_name().find(search_term) != string::npos; break;
            case 2: match = to_string(member->get_member_id()) == search_term; break;
            }

            if (match) {
                member->display();
                cout << "--------------------" << endl;
                found = true;
            }
        }

        if (!found) {
            cout << "No members found matching your search." << endl;
        }
        pressEnterToContinue();
    }

    void change_password() {
        clearScreen();
        cout << "=== CHANGE PASSWORD ===" << endl;
        string current, new_pwd, confirm;

        cout << "Enter current password: ";
        cin >> current;

        if (!librarian->authenticate(current)) {
            cout << "Incorrect current password!" << endl;
            pressEnterToContinue();
            return;
        }

        cout << "Enter new password: ";
        cin >> new_pwd;
        cout << "Confirm new password: ";
        cin >> confirm;

        if (new_pwd != confirm) {
            cout << "Passwords don't match!" << endl;
        }
        else {
            
            cout << "Password changed successfully!" << endl;
        }
        pressEnterToContinue();
    }

    void login() {
        clearScreen();
        cout << "=== LIBRARIAN LOGIN ===" << endl;
        string password;
        cout << "Enter password: ";
        cin >> password;

        if (librarian->authenticate(password)) {
            logged_in = true;
            librarian_menu();
        }
        else {
            cout << "Invalid password!" << endl;
            pressEnterToContinue();
        }
    }

public:
    LibrarySystem() : logged_in(false) {

        librarian = new Librarian("LIB001", "Admin", "Library", "1234567890", "2023-01-01", "admin123");

        books.push_back(new Book(101, "J.K. Rowling", "Harry Potter", 29.99, 1, 1997));
        books.push_back(new Book(102, "George Orwell", "1984", 19.99, 2, 1949));
        books.push_back(new Book(103, "J.R.R. Tolkien", "The Hobbit", 24.99, 3, 1937));

        members.push_back(new Student(1001, "Alice Johnson", "123 Main St", "555-1234", "2023-01-15", "Computer Science", 3));
        members.push_back(new Faculty(2001, "Dr. Smith", "456 Oak Ave", "555-5678", "2020-05-20", "Physics", "Professor"));
    }

    ~LibrarySystem() {
        delete librarian;
        for (auto book : books) delete book;
        for (auto member : members) delete member;
    }

    void run() {
        int choice;
        do {
            clearScreen();
            cout << "=== LIBRARY MANAGEMENT SYSTEM ===" << endl;
            cout << "1. Librarian Login\n2. View Books\n3. View Members\n0. Exit\n\nEnter choice: ";
            cin >> choice;

            switch (choice) {
            case 1: login(); break;
            case 2: display_books(); pressEnterToContinue(); break;
            case 3: display_members(); pressEnterToContinue(); break;
            case 0: cout << "Exiting system..." << endl; break;
            default: cout << "Invalid choice!" << endl; pressEnterToContinue();
            }
        } while (choice != 0);
    }
};

// ======================= MAIN FUNCTION =======================
int main() {
    LibrarySystem library;
    library.run();
    return 0;
}
