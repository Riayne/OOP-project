#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Book {
    // Dummy Book class for demonstration
public:
    string title;
    bool available = true;

    Book(string t) : title(t) {}
    string get_title() { return title; }
    void display() { cout << "Title: " << title << ", Available: " << (available ? "Yes" : "No") << endl; }
    void update_status(bool status) { available = status; }
};

class Reader {
    // Dummy Reader class for demonstration
public:
    string name;
    Reader(string n) : name(n) {}
    string get_name() { return name; }
    void borrow_book(Book* book) { book->update_status(false); }
    void return_book(Book* book) { book->update_status(true); }
};

class Person {
protected:
    string name;
public:
    Person(string n) : name(n) {}
    virtual void whoyouare() = 0;
    string get_name() { return name; }
};

class Librarian : public Person {
private:
    string password;
public:
    Librarian(string n, string p) : Person(n), password(p) {}

    bool check_credentials(string uname, string pass) {
        return uname == name && pass == password;
    }

    void whoyouare() override {
        cout << "I am librarian " << name << "\n";
    }

    // Same methods as before...
    void search_book(const vector<Book*>& books, const string& title) {
        for (Book* book : books) {
            if (book->get_title() == title) {
                cout << "Book found: ";
                book->display();
                return;
            }
        }
        cout << "Book not found.\n";
    }

    bool verify_member(Reader* reader) {
        cout << "Verifying reader: " << reader->get_name() << endl;
        return true;
    }

    void issue_book(Book* book, Reader* reader) {
        reader->borrow_book(book);
        cout << "Book issued to reader: " << reader->get_name() << endl;
    }

    float calculate_fine(int daysLate) {
        float fine = daysLate * 1.0f;
        cout << "Fine: $" << fine << endl;
        return fine;
    }

    void create_bill(Reader* reader, float amount) {
        cout << "Creating bill of $" << amount << " for " << reader->get_name() << endl;
    }

    void return_book(Book* book, Reader* reader) {
        reader->return_book(book);
        cout << "Book returned by " << reader->get_name() << endl;
    }
};

class Library {
private:
    vector<Book*> books;
    vector<Reader*> readers;
    vector<Librarian*> librarians;

public:
    Library(const vector<Book*>& initialBooks = {}, const vector<Reader*>& initialReaders = {}, const vector<Librarian*>& initialLibrarians = {})
        : books(initialBooks), readers(initialReaders), librarians(initialLibrarians) {}

    vector<Book*> get_books() { return books; }
    vector<Reader*> get_reader() { return readers; }

    void new_book(Book* book) {
        books.push_back(book);
        cout << book->get_title() << " Added!\n";
    }

    void lend_book(Book* book, Reader* reader) {
        reader->borrow_book(book);
        cout << "Lent book: " << book->get_title() << " to " << reader->get_name() << endl;
    }

    void take_back_book(Book* book) {
        book->update_status(true);
        cout << "Book returned: " << book->get_title() << endl;
    }

    void show_book() {
        for (Book* book : books) book->display();
    }

    Librarian* login(const string& username, const string& password) {
        for (Librarian* lib : librarians) {
            if (lib->check_credentials(username, password)) {
                cout << "Login successful! Welcome " << username << endl;
                return lib;
            }
        }
        cout << "Login failed. Invalid credentials.\n";
        return nullptr;
    }
};
